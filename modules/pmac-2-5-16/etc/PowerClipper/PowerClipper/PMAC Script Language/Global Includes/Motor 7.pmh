// Activate servo algorithms for motors
Motor[7].ServoCtrl=1

// Write servo output to user shared memory registers
Motor[7].pDac=Sys.Idata[7].a	// Same as EncTable[7].pEnc

// Encoder conversion table entry to read and integrate this
EncTable[7].type=1			// 32-bit register read
EncTable[7].pEnc=Sys.idata[7].a	// Same as Motor[7].pDac
EncTable[7].pEnc1=Sys.pushm		// Dummy read (not used)
EncTable[7].index1=0			// No shift right of source data
EncTable[7].index2=0			// No shift left of source data
EncTable[7].index3=0			// No accel limiting
EncTable[7].index4=1			// Single integration
EncTable[7].PrevDelta=0		// No bias before integration
EncTable[7].MaxDelta=0		// No velocity limit
EncTable[7].ScaleFactor=1/65536	// 32 bits -> 16 bits

// Read the encoder conversion table result as feedback
Motor[7].pEnc=EncTable[7].a		// Position loop feedback source
Motor[7].pEnc2=EncTable[7].a	// Velocity loop feedback source

// Disable overtravel limit inputs
// May be needed if there are no physical switches present
Motor[7].pLimits=0

// Disable amplifier enable output
// May be needed if channel is also connected to real amplifier
Motor[7].pAmpEnable=0

// Disable amplifier fault input
// May be needed if channel is also connected to real amplifier
Motor[7].pAmpFault=0

// Set derivative gain term in servo loop to zero
// This is a Type 1 servo (single integration); does not need Kd
Motor[7].Servo.Kvfb=0
// Lower proportional gain term from default
Motor[7].Servo.Kp=1
// Add integral gain to force to zero error
Motor[7].Servo.Ki=0.01
// Set deadband zone to zero
Motor[7].Servo.BreakPosErr=0
// Add feedforward to minimize tracking error
Motor[7].Servo.Kvff=1
Motor[7].Servo.Kaff=1

Motor[7].InPosBand = 10
